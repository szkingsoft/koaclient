// IdetifyCode.cpp : implementation file
//

#include "stdafx.h"
#include "IdentifyCode.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CIdentifyCode

CIdentifyCode::CIdentifyCode()
{
	srand( (unsigned)time( NULL ) );

	memset(m_pRandStr,0,5);
	CreateIdentifyCode();
	TRACE("------->%s\n",m_pRandStr);
}

CIdentifyCode::~CIdentifyCode()
{

}


BEGIN_MESSAGE_MAP(CIdentifyCode, CStatic)
	//{{AFX_MSG_MAP(CIdentifyCode)
	ON_WM_PAINT()
	//}}AFX_MSG_MAP
	ON_WM_LBUTTONUP()
	ON_CONTROL_REFLECT(STN_CLICKED, &CIdentifyCode::OnStnClicked)
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CIdentifyCode message handlers

void CIdentifyCode::OnPaint() 
{
	CPaintDC dc(this); // device context for painting
	
	// TODO: Add your message handler code here
	CDC * pDc = GetDC();
	pDc->TextOut(0,0,_T("            "));
	DrawCIdentifyCode(pDc,m_cOdds);
	ReleaseDC(pDc);
	// Do not call CStatic::OnPaint() for painting messages
}

void CIdentifyCode::CreateIdentifyCode()
{
	//	Ëæ»ú²úÉú×Ö·û
	char *pCode="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	for (int i = 0 ; i < 4 ; i++)
	{
		m_cOdds[i] = rand()%100000;
		int a = m_cOdds[i];
		a = a % 10;
		m_cOdds[i] = a;
		m_pRandStr[i] = pCode[a];
	}
}

void CIdentifyCode::DrawCIdentifyCode(CDC *pDc,int *cOdds)
{
	int nOdds = 8;
	int nAmount = 36;
	COLORREF  vColorData[2];
	vColorData[0] = RGB(0,0,0);
	vColorData[1] = RGB(250,236,211);
	CRect rc ;
	GetClientRect(&rc);
	pDc->Rectangle(0,0,rc.right,rc.bottom);

	char *strNumberData[36];
	strNumberData[0] = "1110000111110111101111011110111101001011110100101111010010111101001011110111101111011110111110000111";
	strNumberData[1] = "1111011111110001111111110111111111011111111101111111110111111111011111111101111111110111111100000111";
	strNumberData[2] = "1110000111110111101111011110111111111011111111011111111011111111011111111011111111011110111100000011";
	strNumberData[3] = "1110000111110111101111011110111111110111111100111111111101111111111011110111101111011110111110000111";
	strNumberData[4] = "1111101111111110111111110011111110101111110110111111011011111100000011111110111111111011111111000011";
	strNumberData[5] = "1100000011110111111111011111111101000111110011101111111110111111111011110111101111011110111110000111";
	strNumberData[6] = "1111000111111011101111011111111101111111110100011111001110111101111011110111101111011110111110000111";
	strNumberData[7] = "1100000011110111011111011101111111101111111110111111110111111111011111111101111111110111111111011111";
	strNumberData[8] = "1110000111110111101111011110111101111011111000011111101101111101111011110111101111011110111110000111";
	strNumberData[9] = "1110001111110111011111011110111101111011110111001111100010111111111011111111101111011101111110001111";
	strNumberData[10] = "1111011111111101111111101011111110101111111010111111101011111100000111110111011111011101111000100011";
	strNumberData[11] = "1000000111110111101111011110111101110111110000111111011101111101111011110111101111011110111000000111";
	strNumberData[12] = "1110000011110111101110111110111011111111101111111110111111111011111111101111101111011101111110001111";
	strNumberData[13] = "1000001111110111011111011110111101111011110111101111011110111101111011110111101111011101111000001111";
	strNumberData[14] = "1000000111110111101111011011111101101111110000111111011011111101101111110111111111011110111000000111";
	strNumberData[15] = "1000000111110111101111011011111101101111110000111111011011111101101111110111111111011111111000111111";
	strNumberData[16] = "1110000111110111011110111101111011111111101111111110111111111011100011101111011111011101111110001111";
	strNumberData[17] = "1000100011110111011111011101111101110111110000011111011101111101110111110111011111011101111000100011";
	strNumberData[18] = "1100000111111101111111110111111111011111111101111111110111111111011111111101111111110111111100000111";
	strNumberData[19] = "1110000011111110111111111011111111101111111110111111111011111111101111111110111110111011111000011111";
	strNumberData[20] = "1000100011110111011111011011111101011111110001111111010111111101101111110110111111011101111000100011";
	strNumberData[21] = "1000111111110111111111011111111101111111110111111111011111111101111111110111111111011110111000000011";
	strNumberData[22] = "1000100011110010011111001001111100100111110101011111010101111101010111110101011111010101111001010011";
	strNumberData[23] = "1000100011110011011111001101111101010111110101011111010101111101100111110110011111011001111000110111";
	strNumberData[24] = "1110001111110111011110111110111011111011101111101110111110111011111011101111101111011101111110001111";
	strNumberData[25] = "1000000111110111101111011110111101111011110000011111011111111101111111110111111111011111111000111111";
	strNumberData[26] = "1110001111110111011110111110111011111011101111101110111110111011111011101001101111011001111110001011";
	strNumberData[27] = "1000001111110111011111011101111101110111110000111111010111111101101111110110111111011101111000110011";
	strNumberData[28] = "1110000011110111101111011110111101111111111001111111111001111111111011110111101111011110111100000111";
	strNumberData[29] = "1000000011101101101111110111111111011111111101111111110111111111011111111101111111110111111110001111";
	strNumberData[30] = "1000100011110111011111011101111101110111110111011111011101111101110111110111011111011101111110001111";
	strNumberData[31] = "1000100011000111011111011101111101110111111010111111101011111110101111111010111111110111111111011111";
	strNumberData[32] = "1001010011110101011111010101111101010111110101011111001001111110101111111010111111101011111110101111";
	strNumberData[33] = "1000100011110111011111101011111110101111111101111111110111111110101111111010111111011101111000100011";
	strNumberData[34] = "1000100011110111011111011101111110101111111010111111110111111111011111111101111111110111111110001111";
	strNumberData[35] = "1100000011110111011111111101111111101111111110111111110111111111011111111011111111101110111100000011";

	for (int ii = 0 ; ii < 4 ; ii ++)
	{
		for (int i = 0 ; i <10 ; i++ )
		{
			for (int iii = 0; iii < 10*2 ; iii ++)
			{
				if (strNumberData[cOdds[ii]][i*10+iii/2] == '0')
				{
					pDc->SetPixel(5+ii * 10 *2 + iii,  (5+i+1)+iii / 11 ,vColorData[0] );
					pDc->SetPixel(5+ii * 10 *2 + iii+1, (5+ i+2)+iii /11 +1,vColorData[1]);
				}
				else
				{
					if (rand()% 4 == 0 && !CPublic::Instance()->IsClear())
					{
						pDc->SetPixel( rand()%(rc.right),rand()%(rc.bottom),vColorData[0] );
					}
				}
			}
		}
	 }
}


void CIdentifyCode::OnLButtonUp(UINT nFlags, CPoint point)
{
	CStatic::OnLButtonUp(nFlags, point);
//	CreateIdentifyCode();
//	RedrawWindow();
}


void CIdentifyCode::OnStnClicked()
{
	CreateIdentifyCode();
	RedrawWindow();
}
